import streamlit as st
import sqlite3
import sys
import os
print(sys.path)
sys.path.append('/app/model')
# sys.path.append(os.path.abspath('../model'))
# os.environ['KMP_DUPLICATE_LIB_OK']='True'
from predict import predict_with_trained_model, load_trained_model
from utils_database import update_database, find_top_10_vocab, fetch_data

conn = sqlite3.connect('example.db')
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS emoji_counts(vocab varchar not null,
                                                     emoji varchar not null,
                                                     cnt integer not null,
                                                     primary key(vocab, emoji));""")

c.execute("""CREATE TABLE IF NOT EXISTS inputs(
                id INTEGER PRIMARY KEY,
                text VARCHAR NOT NULL,
                emojis VARCHAR NOT NULL
            );""")

conn_train = sqlite3.connect('/app/app/Database.db')
#conn_train = sqlite3.connect('Database.db')
c_train = conn_train.cursor()
model = load_trained_model()


def main():
    example = ("I love COSI217")
    option = st.sidebar.radio("Select Task:", ("Add Emoji To Text", "Database"))
    if 'stage' not in st.session_state:
        st.session_state.stage = 0

    if option == "Add Emoji To Text":
        # st.set_page_config(layout='wide')
        st.markdown('## Add Emoji To Text')

        text = st.text_area('Text to process', height=100)
        st.button("Submit", type='secondary', on_click=set_stage, args=(1,))

        tab1, tab2 = st.tabs(["Text with Emojis", "More about Generated Emojis"])

        if st.session_state.stage > 0:  # Input Submitted
            emojis = emoji_generator(text)  # Predict emojis for input
            with tab1:
                st.write("Show results generated by trained model:", emojis)
                st.write("Are you satisfied with the generated results?")
                col1, col2 = st.columns([1, 1])
                with col1:
                    st.button("Yes", type='secondary', on_click=set_stage, args=(2,))
                with col2:
                    st.button("No", type='secondary', on_click=set_stage, args=(3,))
                if st.session_state.stage == 2:
                    update_database(text, emojis, conn, c)
                    st.write("Thank you for your feedback!")
                elif st.session_state.stage > 2:
                    adjusted = st.text_area('Enter emoji you think is appropriate to help our model do better',
                                            height=100)
                    if st.session_state.stage == 3:
                        st.button("Submit My Answer", type='secondary', on_click=set_stage, args=(4,))
                    if st.session_state.stage > 3:
                        adjusted = adjusted.replace(" ", "")
                        print(adjusted + "This is adjusted")
                        emojis_list = [emoji for emoji in adjusted]
                        update_database(text, emojis_list, conn, c)
                        st.write("Your answer is submitted. Thank you!")

            with tab2:
                st.write("Show top ten words shown with generated emoji (stop words filtered)")
                for e in emojis:
                    top_10_vocab = find_top_10_vocab(e, c_train)
                    st.subheader(f"Top 10 vocab for emoji {e}")
                    st.table(top_10_vocab)

        else:
            st.write("Submit to see result")

    else:
        set_stage(0)
        st.markdown('## Database')
        data1 = fetch_data("emoji_counts", c)
        data2 = fetch_data("inputs", c)
        tab1, tab2 = st.tabs(["Emoji Counts", "Recorded Data"])
        with tab1:
            if data1:
                st.subheader("Counts Data from Database:")
                st.table(data1)
            else:
                st.write("No data found in the database.")
        with tab2:
            if data2:
                st.subheader("All Input Data from Database:")
                st.table(data2)
            else:
                st.write("No data found in the database.")


def set_stage(stage):
    st.session_state.stage = stage


def emoji_generator(text):
    emojis = predict_with_trained_model(text, model)
    return emojis


if __name__ == "__main__":
    main()

