import streamlit as st
import sqlite3
import random

conn=sqlite3.connect('example.db')
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS emoji_counts(vocab varchar not null,
                                                     emoji1 integer not null,
                                                     emoji2 integer not null,
                                                     emoji3 integer not null,
                                                     emoji4 integer not null,
                                                     emoji5 integer not null,
                                                     primary key(vocab));""")


class Vocab:
    def __init__(self, text, emoji_counts):
        self.text = text
        self.emoji_counts = emoji_counts

def main():
    example = ("I love COSI217")



    option = st.sidebar.radio("Select Task:", ("Add Emoji To Text", "Database"))

    if option == "Add Emoji To Text":
        # st.set_page_config(layout='wide')
        st.markdown('## Add Emoji To Text')

        text = st.text_area('Text to process', value=example, height=100)
        submit = st.button("Submit", type='secondary')
        tab1, tab2 = st.tabs(["Text with Emojis", "More about Generated Emojis"])
        if submit:
            st.write(text)
            emojis = emoji_generator()
            update_database(text, emojis)
            with tab1:
                st.write("Show results generated by trained model:", emojis)
            with tab2:
                st.write("Show top ten words shown with generated emoji (stop words filtered)")
        else:
            st.write("Submit to see result")

    else:
        st.markdown('## Database')
        data = fetch_data()
        if data:
            st.subheader("Data from Database:")
            st.table(data)
        else:
            st.write("No data found in the database.")


def emoji_generator():
    random_list = [random.randint(0, 1) for _ in range(5)]
    return random_list


def fetch_data():
    c.execute("SELECT * FROM emoji_counts")
    return c.fetchall()


def insert_data(d):
    with conn:
        c.execute("insert into emoji_counts values (:vocab, :emoji1, :emoji2, :emoji3, :emoji4, :emoji5)",
                  {'vocab':d.text, 'emoji1':d.emoji_counts[0], 'emoji2':d.emoji_counts[1], 'emoji3':d.emoji_counts[2], 'emoji4':d.emoji_counts[3], 'emoji5':d.emoji_counts[4]})


def update_data(vocab, original_count, new_count):
    updated_data = [original + new for original, new in zip(original_count, new_count)]
    print(updated_data)
    c.execute("UPDATE emoji_counts SET emoji1=?, emoji2=?, emoji3=?, emoji4=?, emoji5=? WHERE vocab=?", updated_data + [vocab])
    conn.commit()


def update_database(text, emojis):
    vocab = text.split()
    emoji = emojis  # assume there's some function that returned a emoji encoder
    for v in vocab:
        c.execute("SELECT * FROM emoji_counts WHERE vocab = ?", (v,))
        result = c.fetchone()
        print(result)
        if not result:
            d = Vocab(v,emoji)
            insert_data(d)
        else:
            print(result[1:])
            update_data(v, result[1:], emoji)


if __name__ == "__main__":
    main()



