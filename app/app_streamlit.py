import streamlit as st
import sqlite3
import random
import re

conn=sqlite3.connect('example.db')
c = conn.cursor()
c.execute("""CREATE TABLE IF NOT EXISTS emoji_counts(vocab varchar not null,
                                                     emoji varchar not null,
                                                     cnt integer not null,
                                                     primary key(vocab, emoji));""")
# c.execute("""CREATE TABLE IF NOT EXISTS inputs(id integer primary key,
#                                                text varchar not null,
#                                                emojis varchar not null,
#                                                );""")
c.execute("""CREATE TABLE IF NOT EXISTS inputs(
                id INTEGER PRIMARY KEY,
                text VARCHAR NOT NULL,
                emojis VARCHAR NOT NULL
            );""")



class Vocab:
    def __init__(self, text, emoji):
        self.text = text
        self.emoji = emoji

def main():
    example = ("I love COSI217")
    option = st.sidebar.radio("Select Task:", ("Add Emoji To Text", "Database"))
    if 'stage' not in st.session_state:
        st.session_state.stage = 0

    if option == "Add Emoji To Text":
        # st.set_page_config(layout='wide')
        st.markdown('## Add Emoji To Text')

        text = st.text_area('Text to process', value=example, height=100)
        st.button("Submit", type='secondary', on_click=set_stage, args=(1,))

        tab1, tab2 = st.tabs(["Text with Emojis", "More about Generated Emojis"])

        if st.session_state.stage > 0:
            #st.write(text)
            emojis = emoji_generator(text)
            if st.session_state.stage == 1:
                update_database(text, emojis)
            with tab1:
                st.write("Show results generated by trained model:", emojis)
                st.write("Are you satisfied with the generated results?")
                col1, col2 = st.columns([1, 1])
                with col1:
                    st.button("Yes", type='secondary', on_click=set_stage, args=(2,))
                with col2:
                    st.button("No", type='secondary', on_click=set_stage, args=(3,))
                if st.session_state.stage == 2:
                    update_inputs_table(text, emojis)
                elif st.session_state.stage > 2:
                    adjusted = st.text_area('Enter emoji you think is appropriate to help our model do better',
                                            height=100)
                    if st.session_state.stage == 3:
                        st.button("Submit My Answer", type='secondary', on_click=set_stage, args=(4,))
                    if st.session_state.stage > 3:
                        #adjusted = re.findall(r'\X', adjusted)
                        #update_inputs_table(text, adjusted)
                        st.write("Your answer is submitted. Thank you!")

            with tab2:
                st.write("Show top ten words shown with generated emoji (stop words filtered)")
                for e in emojis:
                    top_10_vocab = find_top_10_vocab(e)
                    st.subheader(f"Top 10 vocab for emoji {e}")
                    st.table(top_10_vocab)

        else:
            st.write("Submit to see result")

    else:
        st.markdown('## Database')
        data1 = fetch_data("emoji_counts")
        data2 = fetch_data("inputs")
        tab1, tab2 = st.tabs(["Emoji Counts", "Recorded Data"])
        with tab1:
            if data1:
                st.subheader("Counts Data from Database:")
                st.table(data1)
            else:
                st.write("No data found in the database.")
        with tab2:
            if data2:
                st.subheader("All Input Data from Database:")
                st.table(data2)
            else:
                st.write("No data found in the database.")


def set_stage(stage):
    st.session_state.stage = stage


def emoji_generator(text):
    # random_list = [random.randint(0, 1) for _ in range(5)]
    # return random_list
    if text == "I love COSI217":
        return ['\u2764\ufe0f', '\U0001F60D']
    if text == "I love cooking":
        return ['\U0001F60D', '\U0001F373']


def fetch_data(table):
    c.execute("SELECT * FROM {}".format(table))
    return c.fetchall()


def find_top_10_vocab(emoji):
    c.execute("""
        SELECT vocab, cnt
        FROM emoji_counts
        WHERE emoji = ?
        ORDER BY cnt DESC
        LIMIT 10
    """, (emoji,))
    return c.fetchall()


def insert_data(d):
    with conn:
        c.execute("insert into emoji_counts values (:vocab, :emoji, :cnt)",
                  {'vocab': d.text, 'emoji': d.emoji, 'cnt': 1})


def update_data(vocab, emoji, original_count):
    c.execute("UPDATE emoji_counts SET cnt=? WHERE vocab=? AND emoji=?", (original_count + 1, vocab, emoji))
    conn.commit()


def update_inputs_table(text, emojis):
    with conn:
        c.execute("INSERT INTO inputs (text, emojis) VALUES (?, ?)", (text, ''.join(emojis)))


def update_database(text, emojis):
    update_inputs_table(text, emojis)
    vocab = text.split()
    for v in vocab:
        for e in emojis:
            c.execute("SELECT * FROM emoji_counts WHERE vocab = ? AND emoji = ?", (v,e))
            result = c.fetchone()
            if not result:
                d = Vocab(v, e)
                insert_data(d)
            else:
                update_data(v, e, result[-1])


if __name__ == "__main__":
    main()

